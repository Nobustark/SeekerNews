# 📰 Full-Stack News Website — PRD for Replit AI Agent

Build a complete full-stack **news website** using **Firebase** inside **Replit**. I want a working web app with admin features and a public-facing article display. I don’t know much about coding, so write clean, well-commented code and structure everything properly.

---

## 📌 Project Overview

A simple news website where:
- **Admins** can log in and post articles with images
- **Visitors** can view articles on a clean, responsive homepage

Data should be stored in **Firebase Firestore**, images in **Firebase Storage**, and authentication handled via **Firebase Auth**.

---

## ✅ Features

### 1. Admin Panel (`/admin`)
- Admin login using Firebase Auth (email/password)
- Article creation form:
  - Title
  - Content (textarea or markdown)
  - Image upload
  - Auto-generated slug
- View, edit, and delete articles

### 2. Public Homepage (`/`)
- List of all published articles with:
  - Title
  - Thumbnail
  - Publish date
  - Short excerpt
- Click to read full article

### 3. Article Page (`/article/:slug`)
- Display full content and image
- Add SEO-friendly meta tags (title, description, Open Graph)

---

## ⚙️ Tech Stack

- **Frontend**: HTML, CSS, Vanilla JS or React (whichever fits Replit better)
- **Backend**: Firebase (Firestore, Auth, Storage)
- **Styling**: Tailwind CSS or clean responsive CSS
- **Hosting**: Serve on Replit’s built-in web server

---

## 📁 Suggested Folder Structure

/public
├── index.html
├── article.html
├── admin.html
/firebase.js
/style.css
/main.js

yaml
Copy
Edit

Or a React-based folder structure if you use React.

---

## 🔐 Environment Variables

- Use `.env` to store Firebase config keys
- Guide me through:
  - Setting up Firebase project
  - Copying config values
  - Connecting from Replit safely

---

## 🧠 Logic & Storage

- Articles stored in Firestore (collection: `articles`)
- Images uploaded to Firebase Storage
- Each article document should include:
  - `title`, `content`, `slug`, `imageUrl`, `createdAt`
- Admin-only access to `/admin`
- Slugs generated from titles
- SEO meta tags for article sharing

---

## 🎁 Deliverables

- Full working Replit project
- All code, components, and setup included
- Firebase setup steps
- Working admin panel
- Public homepage and article page
- Clean, modern UI
- Optional: Add loading spinner while fetching content

---

## 📝 Final Notes

- Keep everything beginner-friendly
- Comment the code wherever needed
- Avoid overcomplicating with extra libraries
- Prioritize usability, clarity, and clean design